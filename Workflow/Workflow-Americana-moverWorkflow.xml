<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" name="Americana-Mover workflow" type="IdentityLifecycle">
          
    
    <Variable initializer="mover" name="flow">
                    
        
        <Description>The flow</Description>
                  
    
    </Variable>
          
    
    <Variable initializer="mover" input="true" name="trace"/>
          
    
    <Variable input="true" name="event" transient="true">
                    
        
        <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
                  
    
    </Variable>
          
    
    <Variable input="true" name="identityName">
                    
        
        <Description>The name of the identity.</Description>
                  
    
    </Variable>
          
    
    <Description>Process a employee to new OU.</Description>
          
    
    <Step icon="Start" name="Start" posX="28" posY="10">
                    
        
        <Transition to="Create Identity Certification"/>
                  
    
    </Step>
          
    
    <Step icon="Message" name="Create Identity Certification" posX="148" posY="10">
                    
        
        <Description>create Identity certification for the new Mover.</Description>
                    
        
        <Script>
                              
            
            <Source><![CDATA[
        import sailpoint.object.*;
        import sailpoint.api.*;
        import sailpoint.api.TaskManager;
        import sailpoint.object.Certification;
        import sailpoint.object.CertificationDefinition;
        import sailpoint.object.Identity;
        import sailpoint.object.TaskDefinition;
        import sailpoint.object.TaskResult;
        import sailpoint.object.TaskSchedule;
        import sailpoint.object.TaskResult;
        import sailpoint.tools.xml.XMLObjectFactory;
        import sailpoint.tools.xml.XMLReferenceResolver;
        import sailpoint.tools.GeneralException;
        import sailpoint.object.CertificationSchedule;
        import sailpoint.api.CertificationScheduler;
        import java.text.DateFormat;  
        import java.util.Date;

        Identity oldIdentity = event.getOldObject();
        Identity newIdentity = event.getNewObject();
        String oldDepartment = oldIdentity.getAttribute("Department");
        String newDepartment = newIdentity.getAttribute("Department");
        Date date = Calendar.getInstance().getTime();
        String dateToStr = DateFormat.getDateTimeInstance().format(date);
        Identity identity = context.getObjectByName(Identity.class,identityName);
        
        //String dateString = sailpoint.tools.Util.dateToString(date,"yyyy-MM-dd HH:mm:ss");
        List dates = new ArrayList();
        dates.add(dateToStr);
        
        if((oldDepartment != null && newDepartment != null && !(oldDepartment.equalsIgnoreCase(newDepartment))) && (!(oldIdentity.getManager().getName().equalsIgnoreCase(newIdentity.getManager().getName())))){
        	workflow.put("oldDepartment",oldIdentity.getAttribute("Department"));
        	workflow.put("newDepartment",newIdentity.getAttribute("Department"));
        	String certifier = oldIdentity.getManager().getName();
        	List identities = new ArrayList();
        	identities.add(identity.getName());
        	Identity requestor = context.getObjectByName(Identity.class, "spadmin");
        
        	CertificationScheduler scheduler = new CertificationScheduler(context);
        	CertificationSchedule schedule = scheduler.initializeScheduleBean(requestor, Certification.Type.Identity);
        	schedule.setRunNow(true);
        	CertificationDefinition definitionTemplate = context.getObjectByName(CertificationDefinition.class, "Identity Certification Template");
        	CertificationDefinition definition = (CertificationDefinition) XMLObjectFactory.getInstance().cloneWithoutId(definitionTemplate, (XMLReferenceResolver)context);
        	definition.setNameTemplate("Americana-Mover Identity Cert");
        	definition.setShortNameTemplate("Americana-Mover Identity Cert");
        	definition.setName("Americana-Mover Identity Cert "+identityName+" "+dates.toString());
        	definition.setCertificationNameTemplate("Americana-Mover Identity Cert "+identityName+" "+dates.toString());

        	definition.setIdentitiesToCertify(identities);
        	definition.setCertifierSelectionType(CertificationDefinition.CertifierSelectionType.Manual);
        	definition.setCertifierName(certifier);
        	definition.setStagingEnabled(false);
        	definition.setCertificationOwner(requestor);


        	schedule.setDefinition(definition);
        	TaskSchedule taskSchedule = scheduler.saveSchedule(schedule, false);
				}
        
        List identityLinks = identity.getLinks();
        for(Link link :identityLinks){
        	if(link.getApplicationName().equalsIgnoreCase("AD")) workflow.put("link",link.getNativeIdentity());
        }
        
      ]]></Source>
                            
        
        </Script>
                    
        
        <Transition to="Stop" when="workflow.get(&quot;link&quot;) == null"/>
                    
        
        <Transition to="change OU" when="(workflow.get(&quot;oldDepartment&quot;) != null &amp;&amp; workflow.get(&quot;newDepartment&quot;) != null) &amp;&amp; (!(workflow.get(&quot;oldDepartment&quot;).equals(workflow.get(&quot;newDepartment&quot;)))) &amp;&amp; workflow.get(&quot;link&quot;) != null"/>
                  
    
    </Step>
          
    
    <Step icon="Task" name="change OU" posX="148" posY="10" resultVariable="plan">
                    
        
        <Description>Chnage the Active Directory OU for the mover.</Description>
                    
        
        <Script>
                              
            
            <Source><![CDATA[
      	import sailpoint.api.Provisioner;
      	import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
      	
      	Identity identity = context.getObjectByName(Identity.class,identityName);
      	ProvisioningPlan plan = new ProvisioningPlan();
      	plan.setIdentity(identity);
      
      	AccountRequest accountRequest = new AccountRequest();
        accountRequest.setApplication("AD");
      	accountRequest.setNativeIdentity(workflow.get("link"));
      	accountRequest.add(new AttributeRequest("AC_newParent",ProvisioningPlan.Operation.Set,"OU=ModifiedOUusers,OU=Demo,DC=IIQ,DC=com"));
      	plan.add(accountRequest);
      	
      	return plan;
        
      ]]></Source>
                            
        
        </Script>
                    
        
        <Transition to="provisionUser"/>
                  
    
    </Step>
          
    
    <Step icon="Task" name="provisionUser" posX="183" posY="12">
                    
        
        <Arg name="approvalSet" value="ref:approvalSet"/>
                    
        
        <Arg name="flow" value="ref:flow"/>
                    
        
        <Arg name="identityName" value="ref:identityName"/>
                    
        
        <Arg name="launcher" value="ref:launcher"/>
                    
        
        <Arg name="plan" value="ref:plan"/>
                    
        
        <Arg name="approvalScheme" value="none"/>
                    
        
        <Arg name="foregroundProvisioning" value="false"/>
                    
        
        <Arg name="approvalScheme" value="none"/>
                    
        
        <Return name="project" to="project"/>
                    
        
        <WorkflowRef>
                              
            
            <Reference class="sailpoint.object.Workflow" name="LCM Provisioning"/>
                            
        
        </WorkflowRef>
                    
        
        <Transition to="Stop"/>
                  
    
    </Step>
          
    
    <Step icon="Stop" name="Stop" posX="268" posY="10"/>
        

</Workflow>
